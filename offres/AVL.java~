import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.lang.String;
import java.lang.Math;

public class AVL{
	public String cle;
	public int hauteur;
	public AVL FG;
	public AVL FD;
	public AVL(String cle, AVL FG, AVL FD){
		this.cle = cle;
		this.FG = FG;
		this.FD = FD;
		this.hauteur = 1 + Math.max(hauteur(FG),hauteur(FD));
	}
	

	public static int hauteur(AVL arbre){
		if(arbre == null) return -1;
		return arbre.hauteur;
	}
	public static void calcHauteur(AVL arbre){
		arbre.hauteur = 1 + Math.max(hauteur(arbre.FG), hauteur(arbre.FD));
	}
	public static AVL rotationG(AVL arbre){
		if(arbre == null) return null;
		AVL x = arbre.FD;
		if(x == null){
			return arbre;
		}
		AVL y = new AVL( arbre.cle,arbre.FG, x.FG);
		return new AVL(x.cle, y, x.FD);
	}
	public static AVL rotationD(AVL arbre){
		if(arbre == null) return null;
		AVL x = arbre.FG;
		if(x == null) return arbre;
		AVL y =  new AVL(arbre.cle,x.FD,arbre.FD);
		if(x.FG == null )
			return new AVL(x.cle, null, y);
		return new AVL(x.cle,x.FG.FG,y);
	}
	public static AVL equilibrer(AVL arbre){
		calcHauteur(arbre);
		if (hauteur(arbre.FG) - hauteur(arbre.FD) == 2){
			if (hauteur(arbre.FG.FD) > hauteur(arbre.FG.FG))
				arbre.FG = rotationG(arbre.FG);
			return rotationD(arbre);
		} 
		if (hauteur(arbre.FG)- hauteur(arbre.FD) == -2){
			if (hauteur(arbre.FD.FD) > hauteur(arbre.FD.FG))
				arbre.FD = rotationD(arbre.FD);
			return rotationG(arbre);
		}
		return arbre;
	}
	/*on ne met pas x dans arbre s'il exite deja,
 	vu que le but du projet est de voir si
	 un mot existe dans le texte */
	public static AVL inserer(String x, AVL arbre){
		if(arbre == null)
			return new AVL(x,null,null);	
		else if(arbre.cle.compareTo(x) < 0)
			arbre.FD = inserer(x, arbre.FD);
		else if(arbre.cle.compareTo(x) > 0)
			arbre.FG = inserer(x, arbre.FG);
		return equilibrer(arbre);
	}
	public static AVL tempsInserer(String mot,AVL arbre ){
	    long start = System.nanoTime();	
	    AVL a = inserer(mot,arbre);
	    long duree = System.nanoTime() - start;;
	    System.out.println("             Inserction du mot '"+mot+"' en "+ duree/1000000000.0 +" secondes (taille du mot = "+mot.length()+")");
	    return a;
	}
	public static boolean rechercher(String x,AVL arbre){
		if(arbre == null) return false;
		else if(arbre.cle.equals(x)) return true;
		else if(arbre.cle.compareTo(x) <= 0) 
			return rechercher(x,arbre.FD);
		return rechercher(x,arbre.FG);		
	}
	public static boolean tempsRechercher(String mot, AVL arbre){
	    long start = System.nanoTime();	
	    boolean reslt = rechercher(mot,arbre);
	    long duree = System.nanoTime() - start;;
	    System.out.println("             Recherche du mot '"+mot+"' en "+ duree/1000000000.0 +" secondes (taille du mot = "+mot.length()+") : "+reslt);
	    return reslt;
	}
	

	public static AVL AVLConstruit(String nomFic){
	    long start = System.nanoTime();
	    int n = 0;
	    AVL arbre = null;
	    try{		
		BufferedReader entree = new BufferedReader(new FileReader(new File(nomFic)));
    		while (true) {
      			String ligne = null;
      			try {
        			ligne = entree.readLine();
      			} catch (IOException e) {
        		// si cela se passe mal, on s'arrÃªte.
        		System.err.println("# Erreur pendant la lecture de \""+ nomFic +"\".");
        		System.exit(1);
      			}
      			if (ligne == null) {
        			break;
      			}
			n++;
      			arbre = inserer(ligne,arbre);
    		} 
       	    }catch (FileNotFoundException e) {
      		System.err.println("# Erreur : impossible de lire \""+ nomFic +"\".");
           	System.exit(1);
    	    }
	    long duree = System.nanoTime() - start;;
	    System.out.println("AVL: "+ duree/1000000000.0 +" secondes pour n = "+n);
	    return arbre;	 

	}

	public static void main(String[] args){
		AVL arbre = AVLConstruit(args[0]);
		//arbre.toStringArbre();
		System.out.println(rechercher("sali la",arbre));
		System.out.println(rechercher("sali laa",arbre));
		arbre = inserer("sali laa",arbre);
		System.out.println(rechercher("sali laa",arbre));


	}
}
